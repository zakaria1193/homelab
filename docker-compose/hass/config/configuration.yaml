
# Configure a default setup of Home Assistant (frontend, api, etc)
default_config:

http:
  # For extra security set this to only accept connections on localhost if NGINX is on the same machine
  # Uncommenting this will mean that you can only reach Home Assistant using the proxy, not directly via IP from other clients.
  # server_host: 127.0.0.1
  use_x_forwarded_for: true
  # You must set the trusted proxy IP address so that Home Assistant will properly accept connections
  # Set this to your NGINX machine IP, or localhost if hosted on the same machine.
  # using nginx's containers ip (FIXME is it fixed?) 
  trusted_proxies: 172.19.0.2

# Text to speech
tts:
  - platform: google_translate

group: !include groups.yaml
automation: !include automations.yaml
script: !include scripts.yaml
scene: !include scenes.yaml

frontend:
  themes: !include_dir_merge_named themes

netatmo: # requires integration through web interface too
  client_id: !secret NETATMO_ID
  client_secret: !secret NETATMO_SECRET

webostv:
  host: 192.168.1.12
  name: LG TV

home_plus_control:
  client_id: !secret HC_ID
  client_secret: !secret HC_SECRET
  subscription_key: !secret HC_SUBSCRIPTION_KEY

device_tracker:
  - platform: bbox
    host: 192.168.1.254

sensor bbox:
  - platform: bbox
    monitored_variables:
      - down_max_bandwidth
      - up_max_bandwidth
      - current_down_bandwidth
      - current_up_bandwidth
      - uptime
      - number_of_reboots

climate thermostat:
  - platform: generic_thermostat
    name: Bedroom heating fan thermostat
    heater: switch.heating_fan
    target_sensor: sensor.netatmo_issy_indoor_temperature
    min_temp: 15
    max_temp: 24
    ac_mode: false
    target_temp: 17
    cold_tolerance: 0.5
    hot_tolerance: 0
    min_cycle_duration:
      seconds: 300
    keep_alive:
      minutes: 1000
    initial_hvac_mode: "heat"
    away_temp: 15
    precision: 0.1

google_assistant:
  project_id: oiassistant
  service_account: !include oiassistant-secrets.json
  report_state: true
  expose_by_default: false
  exposed_domains:
    - climate
    - media_player
  entity_config:
    climate.bedroom_heating_fan_thermostat:
            name: Thermostat
    media_player.lg_tv:
            name: TV

sensor:
  - platform: command_line
    name: GRDF consommation gaz
    command: "/config/gazpar/gazpar_ha.sh sensor"
    scan_interval: 100000000
    unit_of_measurement: "kWh"
    json_attributes:
      - conso_m3
      - index_kWh
      - index_m3
      - coeffConversion
      - date
      - log
    value_template: '{{ value_json.conso_kWh }}'


# Un de ces Sensors permettra d'ajouter la consommation au Tableau de bord Energie
template:
  - sensor:
      name: "Gas consumption index (m続)"
      unit_of_measurement: "m続"
      device_class: "gas"
      state_class: "total_increasing"
      state: "{{ state_attr('sensor.grdf_consommation_gaz', 'index_m3') }}"

  - sensor:
      name: "Gas consumption index (kWh)"
      unit_of_measurement: "kWh"
      device_class: "energy"
      state_class: "total_increasing"
      state: "{{ state_attr('sensor.grdf_consommation_gaz', 'index_kWh') }}"

  # Ce Sensor est optionnel
  - sensor:
      name: "GRDF consommation gaz (m続)"
      unit_of_measurement: "m続"
      device_class: "gas"
      state: "{{ state_attr('sensor.grdf_consommation_gaz', 'conso_m3') }}"

shell_command:
    grdf_get_data: '/config/gazpar/gazpar_ha.sh fetch  {{ states("input_text.grdf_user") | base64_encode }} {{ states("input_text.grdf_pwd") | base64_encode }}  {{ states("input_text.grdf_pce") }}'
    grdf_delete_data: '/config/gazpar/gazpar_ha.sh delete'

input_text:
  grdf_user:
    initial: !secret grdf_user
  grdf_pwd:
    initial: !secret grdf_pwd
  grdf_pce:
    initial: !secret grdf_pce
