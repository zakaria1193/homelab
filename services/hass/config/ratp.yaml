#############################
# 1 — Template helpers
#############################
template:
  - sensor:
      # Minutes until the very next bus 171
      - name: "minutes_to_next_bus_171"
        unique_id: minutes_to_next_bus_171
        unit_of_measurement: "min"
        state: >
          {% set ts = states('sensor.bus_171_next_0') %}
          {% if ts not in ['unknown','unavailable',''] %}
            {{ ((as_timestamp(ts) - as_timestamp(now())) / 60) | round(0, default=0) }}
          {% else %}
            unknown
          {% endif %}

      # Minutes until the very next train on line L
      - name: "minutes_to_next_train_l"
        unique_id: minutes_to_next_train_l
        unit_of_measurement: "min"
        state: >
          {% set ts = states('sensor.l_line_next_0') %}
          {% if ts not in ['unknown','unavailable',''] %}
            {{ ((as_timestamp(ts) - as_timestamp(now())) / 60) | round(0, default=0) }}
          {% else %}
            unknown
          {% endif %}

#############################
# 2 — Reusable script
#############################
script:
  announce_next_transport:
    alias: "Announce next bus & train"
    description: >
      Builds a message like
      “Bus 171 in 7 min / Line L in 3 min” and sends or speaks it.
    mode: single

    # ────── VARIABLES ──────
    variables:
      bus_min: "{{ states('sensor.minutes_to_next_bus_171') }}"
      train_min: "{{ states('sensor.minutes_to_next_train_l') }}"
      bus_disrupted: "{{ is_state('binary_sensor.bus_171_status','on') }}"
      train_disrupted: "{{ is_state('binary_sensor.l_line_status','on') }}"

      # Natural‑language snippets
      bus_part: >
        {% if bus_disrupted %}
          ⚠️ Bus 171 disrupted
        {% elif bus_min in ['unknown','unavailable'] %}
          Bus 171 schedule unavailable
        {% elif bus_min | int(99) == 0 %}
          Bus 171 arriving now
        {% elif bus_min | int == 1 %}
          Bus 171 in 1 minute
        {% else %}
          Bus 171 in {{ bus_min }} minutes
        {% endif %}
      train_part: >
        {% if train_disrupted %}
          ⚠️ Line L disrupted
        {% elif train_min in ['unknown','unavailable'] %}
          Line L schedule unavailable
        {% elif train_min | int(99) == 0 %}
          Line L arriving now
        {% elif train_min | int == 1 %}
          Line L in 1 minute
        {% else %}
          Line L in {{ train_min }} minutes
        {% endif %}
      full_message: "{{ bus_part }} · {{ train_part }}"

    # ────── WHAT TO DO WITH IT ──────
    # 👉  Replace the service below with one that suits you
    sequence:
      - service: notify.mobile_app_your_phone
        data:
          title: "Next departures"
          message: "{{ full_message }}"

      # If you’d also like it spoken on a speaker, add:
      # - service: tts.google_say
      #   target: { entity_id: media_player.entrance_speaker }
      #   data: { message: "{{ full_message }}", cache: false }

#############################
# 3 — Example daily automation (optional)
#############################
automation:
  - alias: "07 h commute update"
    id: commute_update_07h
    trigger:
      - platform: time
        at: "07:00:00"
    condition:
      - condition: time         # only on work days
        weekday: [mon,tue,wed,thu,fri]
    action:
      - service: script.announce_next_transport

